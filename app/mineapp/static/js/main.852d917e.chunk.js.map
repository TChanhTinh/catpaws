{"version":3,"sources":["actions/action.js","actions/constant.js","common/config.js","crypto/crypto.js","components/BlockPresentation.js","containers/BlockContainer.js","containers/BlockchainContainer.js","components/BlockchainPresentation.js","App.js","serviceWorker.js","reducers/reducer.js","store/store.js","index.js"],"names":["addBlock","index","nonce","data","prevHash","hash","type","fetchBlockchain","dispatch","axios","get","then","res","console","log","blocks","chain","complexity","string","complex","hashThis","sha256","toString","Title","Typography","TextArea","Input","Block","connect","setBlock","addBlockToChain","prevhash","block","post","nonceProps","dataProps","changed","useState","setData","setNonce","setHash","vaild","setVaild","useEffect","slice","checkVaildHash","className","span","level","value","placeholder","onChange","e","target","onClick","method","url","contentType","Nonce","catch","err","applyChange","Blockchain","state","blockchain","length","stateCount","isChanged","setIsChanged","stateChain","setStateChain","useLayoutEffect","map","mapBlock","App","Boolean","window","location","hostname","match","combineReducers","require","initBlock","refreshChain","i","rootReducer","action","prevState","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.852d917e.chunk.js","sourcesContent":["import { SET_DATA, SET_BLOCK, ADD_BLOCK, MAKE_CHAIN } from './constant'\nimport axios from 'axios'\n\nexport function setData(key, data) {\n    return {\n        type: SET_DATA,\n        key,\n        data\n    }\n}\n\nexport function setBlock(index, nonce, data, prevHash, hash) {\n    return {\n        type: SET_BLOCK,\n        index,\n        nonce,\n        data,\n        prevHash,\n        hash\n    }\n}\n\nexport function addBlock(index, nonce, data, prevHash, hash) {\n    return {\n        type: ADD_BLOCK,\n        index,\n        nonce,\n        data,\n        prevHash,\n        hash\n    }\n}\n\nexport function makeChain(chain) {\n    return {\n        type: MAKE_CHAIN,\n        chain\n    }\n}\n\nexport function fetchBlockchain() {\n    return (dispatch) => {\n        axios.get('/blockchain')\n        .then((res) => {\n            console.log({blocks: res.data})\n            dispatch(makeChain({blocks: res.data}))\n        })\n    }\n}\n\nexport function addBlockToChain(index, nonce, data, prevhash, hash) {\n    return (dispatch) => {\n        const block = {\n            index: index,\n            nonce: nonce,\n            data: data,\n            prevhash: prevhash,\n            hash: hash\n        }\n        axios.post('http://localhost:9000/block', block)\n        .then((res) => {\n            console.log({blocks: res.data})\n            dispatch(fetchBlockchain())\n        })\n    }\n}","export const SET_DATA = \"SET_DATA\"\nexport const ADD_BLOCK = \"ADD_BLOCK\"\nexport const SET_BLOCK = \"SET_BLOCK\"\nexport const MAKE_CHAIN = \"MAKE_CHAIN\"","export const complexity = {\n    string: \"000000000000000000000\",\n    complex: 5\n}","import sha256 from 'crypto-js/sha256'\nimport { complexity } from '../common/config'\n\nexport const findNonce = (data) => {\n    let nonce = 0\n    let hash = \"\"\n\n    while(hash.slice(0, 2) !== complexity.string.slice(0, complexity.complex)) {\n        nonce++\n        hash = sha256(data + nonce).toString()\n    }\n\n    return nonce\n}\n\nexport const hashThis = (nonce, data) => {\n    return sha256(data + nonce).toString()\n}\n\nexport const checkVaildHash = (hash) => {\n    return hash.slice(0, complexity.complex) === complexity.string.slice(0, complexity.complex)\n}","import React, {useState, useEffect} from 'react'\nimport { Typography, Input, Button, Row, Col } from 'antd'\nimport { hashThis, checkVaildHash } from '../crypto/crypto'\nimport '../styles/Block.css'\nimport axios from 'axios'\nimport { complexity } from '../common/config'\n\nconst { Title } = Typography\nconst { TextArea } = Input\n\nexport const BlockPresentation = ({index, prevHash, nonceProps, dataProps, fetchBlockchain, changed}) => {\n    const [data, setData] = useState(dataProps)\n    const [nonce, setNonce] = useState(nonceProps)\n    const [hash, setHash] = useState(\"\")\n    const [vaild, setVaild] = useState(false)\n\n    useEffect(() => {\n        let hash = hashThis(nonce, index+data+prevHash)\n        setHash(hash)\n        setVaild(checkVaildHash(hash))\n    }, [nonce, data, changed])\n\n    function handleClick() {\n        axios({\n            method: 'POST',\n            url: `/mining`,\n            data: {hash: index+data+prevHash, nonce: 0, complexity: complexity.complex},\n            contentType: \"application/json\"\n        })\n        .then( res => {\n            setNonce(res.data.Nonce)\n        })\n        .catch( err => {\n            console.log(err)\n        })\n    }\n\n    function applyChange() {\n        const block = {\n            index: index,\n            nonce: nonce,\n            data: data,\n            prevhash: prevHash,\n            hash: hash\n        }\n        axios.post('/block', block)\n        .then((res) => {\n            console.log(\"called\")\n            fetchBlockchain()\n        })\n        .catch((err) => {\n            console.log(err)\n        })\n    }\n\n    function handleChangeData(e) {\n        setData(e.target.value)\n    }\n\n    function handleChangeNonce(e) {\n        setNonce(e.target.value)\n    }\n\n    return (\n        <div className={(vaild ? \"block-vaild\" : \"block-unvaild\") + \" block\"}>\n            <Row>\n                <Col span={6}>\n                    <Title level={4}>Block</Title>\n                </Col>\n                <Col span={18}>\n                    <Input value={index} placeholder=\"Block\" />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={6}>\n                    <Title level={4}>Nonce</Title>\n                </Col>\n                <Col span={18}>\n                    <Input value={nonce} onChange={handleChangeNonce} placeholder=\"Nonce\" />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={6}>\n                    <Title level={4}>Data</Title>\n                </Col>\n                <Col span={18}>\n                    <TextArea value={data} onChange={handleChangeData} placeholder=\"Data\" />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={6}>\n                    <Title level={4}>PrevHash</Title>\n                </Col>\n                <Col span={18}>\n                    <Input value={prevHash} placeholder=\"PrevHash\" />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={6}>\n                    <Title level={4}>Hash</Title>\n                </Col>\n                <Col span={18}>\n                    <Input value={hash} placeholder=\"Hash\" />\n                </Col>\n            </Row>\n\n            <Button onClick={() => handleClick()}>Mine</Button>\n            <Button onClick={() => applyChange()}>Set block</Button>\n\n        </div>\n    )\n}","import { connect } from 'react-redux'\nimport {setBlock, addBlock, addBlockToChain, fetchBlockchain} from '../actions/action'\nimport { BlockPresentation } from '../components/BlockPresentation'\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setBlock: (index, nonce, data, prevHash, hash) => {\n            dispatch(setBlock(index, nonce, data, prevHash, hash))\n        },\n        addBlock: (index, nonce, data, prevHash, hash) => {\n            dispatch(addBlock(index, nonce, data, prevHash, hash))\n        },\n        addBlockToChain: (index, nonce, data, prevHash, hash) => {\n            dispatch(addBlockToChain(index, nonce, data, prevHash, hash))\n        },\n        fetchBlockchain: () => {\n            dispatch(fetchBlockchain())\n        }\n    }\n}\n\nconst Block = connect(null, mapDispatchToProps)(BlockPresentation)\nexport default Block","import {connect} from 'react-redux'\nimport { BlockchainPresentation } from '../components/BlockchainPresentation'\nimport { addBlock, fetchBlockchain } from '../actions/action'\n\nconst mapStateToProps = state => {\n    const { blockchain } = state\n    return {\n        blockchain: blockchain[blockchain.length-1].blocks,\n        stateCount: blockchain.length\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addBlock: () => dispatch(addBlock()),\n        fetchBlockchain: () => dispatch(fetchBlockchain())\n    }\n}\n\nconst Blockchain = connect(mapStateToProps, mapDispatchToProps)(BlockchainPresentation)\nexport default Blockchain","import React, { useEffect, useLayoutEffect, useState } from 'react'\nimport { Row, Col, Button } from 'antd'\nimport Block from '../containers/BlockContainer'\n\nexport const BlockchainPresentation = ({ fetchBlockchain, blockchain, stateCount, addBlock }) => {\n    const [isChanged, setIsChanged] = useState(false)\n    const [stateChain, setStateChain] = useState(blockchain)\n\n    useEffect(() => {\n        setIsChanged(!isChanged)\n        setStateChain(blockchain)\n    }, [stateCount])\n\n    useLayoutEffect(() => {\n        fetchBlockchain()\n    }, [])\n\n    return (\n        <div>\n            <Row>\n                {stateChain.map((mapBlock, index) => (\n                    <Col span={6}>\n                        <Block index={mapBlock.index} nonceProps={mapBlock.nonce} dataProps={mapBlock.data} prevHash={mapBlock.prevhash} changed={isChanged} />\n                    </Col>\n                ))}\n                <Button onClick={addBlock}>Add block</Button>\n            </Row>\n        </div>\n    )\n}","import React from 'react';\nimport Blockchain from './containers/BlockchainContainer'\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n    <div>\n      <Blockchain />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    SET_BLOCK,\n    ADD_BLOCK,\n    MAKE_CHAIN\n} from \"../actions/constant\"\nimport { hashThis } from \"../crypto/crypto\"\n\nconst { combineReducers } = require(\"redux\")\n\nconst initBlock = {\n    index: 0,\n    nonce: 387902,\n    data: \"\",\n    prevhash: \"0\",\n    hash: \"000004651204ea3016bbba4eb7c7c920d1a4544563d8aca184dcdceb0f8b0f4e\"\n}\n\nconst blocks = (state = [initBlock], action) => {\n    const prevState = state[state.length - 1]\n\n    switch (action.type) {\n        case SET_BLOCK:\n            return [\n                ...state,\n                {\n                    ...prevState,\n                    data: action.data,\n                    nonce: action.nonce,\n                    hash: action.hash\n                }\n            ]\n        default: return state\n    }\n}\n\nconst editBlock = (block, action) => {\n    let cloneBlock = JSON.parse(JSON.stringify(block))\n    cloneBlock.nonce = action.nonce\n    cloneBlock.data = action.data\n    cloneBlock.hash = action.hash\n    return cloneBlock\n}\n\nconst refreshChain = (index, blocks) => {\n    if(index===0)\n        return\n    else\n    for (let i = index; i < blocks.length; i++) {\n        blocks[i].prevHash = blocks[i - 1].hash\n        blocks[i].hash = hashThis(\n            blocks[i].nonce, \n            blocks[i].index + \n            blocks[i].data + \n            blocks[i].prevhash)\n    }\n}\n\nconst blockchain = (state = [{ blocks: [] }], action) => {\n    const prevState = state[state.length - 1]\n\n    switch (action.type) {\n        case ADD_BLOCK:\n            return [\n                ...state,\n                {\n                    blocks: [\n                        ...prevState.blocks,\n                        {\n                            index: prevState.blocks.length+1,\n                            nonce: 0,\n                            data: \"\",\n                            prevhash: prevState.blocks[prevState.blocks.length-1].hash,\n                            hash: \"\"\n                        }\n                    ]\n                }\n            ]\n        case SET_BLOCK:\n            prevState.blocks[action.index] = {\n                index: action.index,\n                nonce: action.nonce,\n                data: action.data,\n                prevhash: action.prevHash,\n                hash: action.hash\n            }\n            refreshChain(action.index, prevState.blocks)\n            return [\n                ...state,\n                prevState\n            ]\n        case MAKE_CHAIN:\n            //console.log(action.chain)\n            return [\n                ...state,\n                action.chain\n            ]\n        default: return state\n    }\n}\n\nconst rootReducer = combineReducers({\n    blocks,\n    blockchain\n})\n\nexport default rootReducer","import { applyMiddleware, compose, createStore } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools, devToolsEnhancer } from 'redux-devtools-extension'\nimport rootReducer from '../reducers/reducer'\n\nconst initState = [{\n    block: {\n        index: 0,\n        nonce: 0,\n        data: \"\",\n        prevHash: \"0\",\n        hash: \"\"\n    },\n    blockchain: {\n        blocks: [\n            {\n                index: 0,\n                nonce: 0,\n                data: \"\",\n                prevHash: \"0\",\n                hash: \"\"\n            }\n        ]\n    }\n}]\n\nconst store = createStore(\n    rootReducer,\n    initState,\n    composeWithDevTools(applyMiddleware(thunk))\n    //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}