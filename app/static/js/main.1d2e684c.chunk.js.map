{"version":3,"sources":["actions/action.js","actions/constant.js","common/config.js","crypto/crypto.js","components/BlockPresentation.js","containers/BlockContainer.js","containers/BlockchainContainer.js","components/BlockchainPresentation.js","App.js","serviceWorker.js","reducers/reducer.js","store/store.js","index.js"],"names":["addBlock","index","nonce","data","prevHash","hash","type","complexity","string","complex","hashThis","Base64","stringify","sha512","Title","Typography","TextArea","Input","Block","connect","dispatch","setBlock","changed","useState","setData","setNonce","setHash","vaild","setVaild","handleClick","slice","findNonce","useEffect","checkVaildHash","className","span","level","value","placeholder","onChange","e","target","onClick","Blockchain","state","blockchain","length","blocks","stateCount","isChanged","setIsChanged","map","mapBlock","App","Boolean","window","location","hostname","match","combineReducers","require","initBlock","refreshChain","i","rootReducer","action","prevState","store","createStore","block","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d2e684c.chunk.js","sourcesContent":["import { SET_DATA, SET_BLOCK, ADD_BLOCK } from './constant'\n\nexport function setData(key, data) {\n    return {\n        type: SET_DATA,\n        key,\n        data\n    }\n}\n\nexport function setBlock(index, nonce, data, prevHash, hash) {\n    return {\n        type: SET_BLOCK,\n        index,\n        nonce,\n        data,\n        prevHash,\n        hash\n    }\n}\n\nexport function addBlock(index, nonce, data, prevHash, hash) {\n    return {\n        type: ADD_BLOCK,\n        index,\n        nonce,\n        data,\n        prevHash,\n        hash\n    }\n}","export const SET_DATA = \"SET_DATA\"\nexport const ADD_BLOCK = \"ADD_BLOCK\"\nexport const SET_BLOCK = \"SET_BLOCK\"","export const complexity = {\n    string: \"000000000000000000000\",\n    complex: 2\n}","import sha512 from 'crypto-js/sha512'\nimport Base64 from 'crypto-js/enc-base64';\nimport { complexity } from '../common/config'\n\nexport const findNonce = (data) => {\n    let nonce = 0\n    let hash = \"\"\n\n    while(hash.slice(0, 2) !== complexity.string.slice(0, complexity.complex)) {\n        nonce++\n        hash = Base64.stringify(sha512(nonce + data))\n    }\n\n    return nonce\n}\n\nexport const hashThis = (nonce, data) => {\n    return Base64.stringify(sha512(nonce + data))\n}\n\nexport const checkVaildHash = (hash) => {\n    return hash.slice(0, complexity.complex) === complexity.string.slice(0, complexity.complex)\n}","import React, {useState, useEffect, useLayoutEffect} from 'react'\nimport { Typography, Input, Button, Row, Col } from 'antd'\nimport { hashThis, findNonce, checkVaildHash } from '../crypto/crypto'\nimport '../styles/Block.css'\n\nconst { Title } = Typography\nconst { TextArea } = Input\n\nexport const BlockPresentation = ({index, prevHash, setBlock, changed}) => {\n    const [data, setData] = useState(\"\")\n    const [nonce, setNonce] = useState(0)\n    const [hash, setHash] = useState(\"\")\n    const [vaild, setVaild] = useState(false)\n\n    useEffect(() => {\n        let hash = hashThis(nonce, index+data+prevHash)\n        setHash(hash)\n        setVaild(checkVaildHash(hash))\n    }, [nonce, data, changed])\n\n    function handleClick() {\n        setNonce(findNonce(index+data+prevHash))\n    }\n\n    function applyChange() {\n        setBlock(index, nonce, data, prevHash, hash)\n    }\n\n    function handleChangeData(e) {\n        setData(e.target.value)\n    }\n\n    function handleChangeNonce(e) {\n        setNonce(e.target.value)\n    }\n\n    return (\n        <div className={(vaild ? \"block-vaild\" : \"block-unvaild\") + \" block\"}>\n            <Row>\n                <Col span={6}>\n                    <Title level={4}>Block</Title>\n                </Col>\n                <Col span={18}>\n                    <Input value={index} placeholder=\"Block\" />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={6}>\n                    <Title level={4}>Nonce</Title>\n                </Col>\n                <Col span={18}>\n                    <Input value={nonce} onChange={handleChangeNonce} placeholder=\"Nonce\" />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={6}>\n                    <Title level={4}>Data</Title>\n                </Col>\n                <Col span={18}>\n                    <TextArea onChange={handleChangeData} placeholder=\"Data\" />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={6}>\n                    <Title level={4}>PrevHash</Title>\n                </Col>\n                <Col span={18}>\n                    <Input value={prevHash} placeholder=\"PrevHash\" />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={6}>\n                    <Title level={4}>Hash</Title>\n                </Col>\n                <Col span={18}>\n                    <Input value={hash} placeholder=\"Hash\" />\n                </Col>\n            </Row>\n\n            <Button onClick={() => handleClick()}>Mine</Button>\n            <Button onClick={() => applyChange()}>Set block</Button>\n\n        </div>\n    )\n}","import { connect } from 'react-redux'\nimport {setBlock, addBlock} from '../actions/action'\nimport { BlockPresentation } from '../components/BlockPresentation'\n\n/*const mapStateToProps = (state) => {\n    const { blockchain } = state\n    const curState = blockchain[blockchain.length-1]\n    return {\n        index: curState.index,\n        prevHash: curState.prevHash\n    }\n}*/\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setBlock: (index, nonce, data, prevHash, hash) => {\n            dispatch(setBlock(index, nonce, data, prevHash, hash))\n        },\n        addBlock: (index, nonce, data, prevHash, hash) => {\n            dispatch(addBlock(index, nonce, data, prevHash, hash))\n        }\n    }\n}\n\nconst Block = connect(null, mapDispatchToProps)(BlockPresentation)\nexport default Block","import {connect} from 'react-redux'\nimport { BlockchainPresentation } from '../components/BlockchainPresentation'\nimport { addBlock } from '../actions/action'\n\nconst mapStateToProps = state => {\n    const { blockchain } = state\n    return {\n        blockchain: blockchain[blockchain.length-1].blocks,\n        stateCount: blockchain.length\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addBlock: () => dispatch(addBlock())\n    }\n}\n\nconst Blockchain = connect(mapStateToProps, mapDispatchToProps)(BlockchainPresentation)\nexport default Blockchain","import React, { useEffect, useState } from 'react'\nimport { Row, Col, Button } from 'antd'\nimport Block from '../containers/BlockContainer'\n\nexport const BlockchainPresentation = ({ blockchain, stateCount, addBlock }) => {\n    const [isChanged, setIsChanged] = useState(false)\n\n    useEffect(() => {\n        setIsChanged(!isChanged)\n    }, [stateCount])\n\n    return (\n        <div>\n            <Row>\n                {blockchain.map((mapBlock, index) => (\n                    <Col span={6}>\n                        <Block index={mapBlock.index} prevHash={mapBlock.prevHash} changed={isChanged} />\n                    </Col>\n                ))}\n                <Button onClick={addBlock}>Add block</Button>\n            </Row>\n        </div>\n    )\n}","import React from 'react';\nimport Blockchain from './containers/BlockchainContainer'\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n    <div>\n      <Blockchain />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    SET_BLOCK,\n    ADD_BLOCK\n} from \"../actions/constant\"\nimport { hashThis } from \"../crypto/crypto\"\n\nconst { combineReducers } = require(\"redux\")\n\nconst initBlock = {\n    index: 0,\n    nonce: 1038,\n    data: \"\",\n    prevHash: \"0\",\n    hash: \"00ltkuFiz2DNoA0JeKv07ZJADy9kyfSJddNexcayIFDYS7RSyBJAVq8JfV1oRFlVY0zAweFEVr5exruY2sTKtQ==\"\n}\n\nconst blocks = (state = [initBlock], action) => {\n    const prevState = state[state.length - 1]\n\n    switch (action.type) {\n        case SET_BLOCK:\n            return [\n                ...state,\n                {\n                    ...prevState,\n                    data: action.data,\n                    nonce: action.nonce,\n                    hash: action.hash\n                }\n            ]\n        default: return state\n    }\n}\n\nconst editBlock = (block, action) => {\n    let cloneBlock = JSON.parse(JSON.stringify(block))\n    cloneBlock.nonce = action.nonce\n    cloneBlock.data = action.data\n    cloneBlock.hash = action.hash\n    return cloneBlock\n}\n\nconst refreshChain = (index, blocks) => {\n    if(index===0)\n        return\n    else\n    for (let i = index; i < blocks.length; i++) {\n        blocks[i].prevHash = blocks[i - 1].hash\n        blocks[i].hash = hashThis(\n            blocks[i].nonce, \n            blocks[i].index + \n            blocks[i].data + \n            blocks[i].prevHash)\n    }\n}\n\nconst blockchain = (state = [{ blocks: [initBlock] }], action) => {\n    const prevState = state[state.length - 1]\n\n    switch (action.type) {\n        case ADD_BLOCK:\n            return [\n                ...state,\n                {\n                    blocks: [\n                        ...prevState.blocks,\n                        {\n                            index: prevState.blocks.length,\n                            nonce: 0,\n                            data: \"\",\n                            prevHash: prevState.blocks[prevState.blocks.length-1].hash,\n                            hash: \"\"\n                        }\n                    ]\n                }\n            ]\n        case SET_BLOCK:\n            prevState.blocks[action.index] = {\n                index: action.index,\n                nonce: action.nonce,\n                data: action.data,\n                prevHash: action.prevHash,\n                hash: action.hash\n            }\n            refreshChain(action.index, prevState.blocks)\n            return [\n                ...state,\n                prevState\n            ]\n        default: return state\n    }\n}\n\nconst rootReducer = combineReducers({\n    blocks,\n    blockchain\n})\n\nexport default rootReducer","import { createStore } from 'redux'\nimport rootReducer from '../reducers/reducer'\n\nconst initState = [{\n    block: {\n        index: 0,\n        nonce: 0,\n        data: \"\",\n        prevHash: \"0\",\n        hash: \"\"\n    },\n    blockchain: {\n        blocks: [\n            {\n                index: 0,\n                nonce: 0,\n                data: \"\",\n                prevHash: \"0\",\n                hash: \"\"\n            }\n        ]\n    }\n}]\n\nconst store = createStore(\n    rootReducer,\n    initState,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}